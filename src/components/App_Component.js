import React, { Component } from 'react';
/**
 * SemanticMaps component
 * This component will be geocoding every store over time
 * and if the successfully geocoded store is within the view bounds
 * it will be added as a marker and trigger the method passed on the
 * onUpdate property
 * @type {Component}
 */
import SemanticMaps from './SemanticMaps_Component';
/**
 * This Method will handle the session
 * so that when the user comes back, he's favorite stores will be updated
 * @type {Function}
 */
import Session from '../third-party/session';


class App extends Component {

    constructor(props) {
        super(props);
        /**
         * Try to get the favoriteStores from the session or set it to an empty array
         * @type {Array}
         */
        this.favoriteStores = Session('favorite_stores') || [];

        /**
         * Set api keys that can be used
         * Only one will be used and is setted to the SemanticMaps component via apiKey property
         * @type {Object}
         */
        this.ApiKey = {
            masquerade: 'AIzaSyBhQLPRIeI762uygwrjVK57_cZsFuEXPyU',
            generation: 'AIzaSyCVH8e45o3d-5qmykzdhGKd1-3xYua5D2A'
        };

        /**
         * Get initial data
         * @type {[type]}
         */
        this.getData()
            .then(() => {
                /**
                 * For every store in favorites put the icon to on
                 */
                this.favoriteStores.map(store => {
                    this.data.map(item => {
                        if (store.key === item.key) {
                            item.icon = './images/store_on.png';
                        }
                    });
                });

                /**
                 * When all initial data is processed
                 * update the component
                 */
                this.forceUpdate();
            });
    }

    /**
     * Method to be called from the SemanticMaps component when a store is successfully geocoded
     * This is to catch the data and the next time the user enters successfully geocoded stores will not trigger the geocoding
     * @method updateData
     * @param  {Array}   stores
     * @return {Void}
     */
    updateData(stores) {
        /**
         * Store the new data in the session
         * @method Session
         * @param  {String} 'stores'    The session property in which the object will be stored
         * @param  {Array} stores       The object that will be stored
         */
        Session('stores', stores);
    }

    /**
     * Gets data from the json file or the session
     * @method getData
     * @return {Promise}    Promise that resolves when the data is fetched
     */
    getData() {
        /**
         * Try to get the data from the session,
         * if no data found set it to an empty array
         * @type {Array}
         */
        this.data = Session('stores') || [];

        /**
         * If data items are more than one
         * add the callback to each item
         * and resolve the promise
         * @method if
         * @return {Promise}      Resolved promise
         */
        if (this.data.length > 0) {
            this.data.map(item => {
                item.callback = this.addFavoriteStore(item);
            });
            return Promise.resolve();
        }

        /**
         * if data items are empty
         * fetch it from the file
         * @type {String}
         * @return {Promise}
         */
        return fetch('store_directory.json', {
            accept : 'application/json',
            contentType : 'application/json'
        }).then(response => response.json()).then(stores => {
            /**
             * For each item, set its properties to be added to the generated marker
             * by SemanticMaps
             */
            stores.map(item => {
                item.address = item.Address;
                item.title = item.Name;
                item.content = item.Name;
                item.key = item.Name;
                item.callback = this.addFavoriteStore(item);
                item.icon = './images/store.png';
            });

            /**
             * Store the modified data in the session
             * @method Session
             * @param  {String} 'stores'    The session property in which the object will be stored
             * @param  {Array} stores       The object that will be stored
             */
            Session('stores', stores);

            /**
             * Set the initial data equals the getted stores
             * @type {Array}
             */
            this.data = stores;
        });
    }

    /**
     * Factory that returns a function to be called when the user clicks on a marker generated by SemanticMaps
     * Adds the store as favorite and updates the marer icon
     * @method addFavoriteStore
     * @param  {Object}     store   The store item to be added as a favorite
     */
    addFavoriteStore(store) {
        /**
         * The click handler to be called when the user clicks on this store marker
         * @method return
         * @param  {google.maps.Map} map        The map to which the marker belongs
         * @param  {google.maps.Marker} marker  The marker on which the user clicked
         * @param  {Object} data                The store object data
         * @return {Function}                   onClick handler
         */
        return (map, marker, data) => {
            let added = false,
                idx;

            /**
             * Search in the favorite stores if the current store was already added
             */
            this.favoriteStores.map((item, index) => {
                /**
                 * If the store is found added, set the added variable to true and the index in
                 * which the store was found.
                 * @method if
                 */
                if (item.key === store.key) {
                    added = true;
                    idx = index;
                }
            });

            /**
             * If the store wasn't already added
             * Add it to the favorite stores and chenge its icon to on
             * @method if
             * @param  {Boolean} added
             */
            if (!added) {
                this.favoriteStores.push(store);
                marker.setIcon('./images/store_on.png');
            }

            /**
             * If the store was already added
             * Remove it from the favorite stores and change its icon to off
             * @method if
             * @param  {Boolean} added
             */
            if (added) {
                this.favoriteStores.splice(idx, 1);
                marker.setIcon('./images/store.png');
            }

            /**
             * Update the favorite stores on the session
             * @method Session
             * @param  {String} 'favorite_stores'       The session property in which the object will be stored
             * @param  {Object} this.favoriteStores    The object that will be stored
             */
            Session('favorite_stores', this.favoriteStores);

            /**
             * Update the component
             */
            this.forceUpdate();
        };
    }

    /**
     * To clear all the favorite stores
     * @method clearFavoriteStore
     * @param  {Event}  event   The click event
     * @return {void}
     */
    clearFavoriteStore(event) {
        this.favoriteStores = []; // Set the favorite_stores to an empty array
        Session('favorite_stores', []); // Save it to the session
        /**
         * Set all the markers and data icons in the map as off
         * @type {Component} SemanticMaps    The SemanticMaps component
         */
        this.refs.map.props.markers.map(marker => marker.icon = './images/store.png');
        this.refs.map.marker.map(marker => marker.setIcon('./images/store.png'));

        /**
         * Update the component and prevent the click event
         */
        this.forceUpdate();
        event.preventDefault();
    }

    render() {
        return (
            <div>
                {
                    // Show the map only if some data exists to be rendered
                    this.data.length > 0 ?
                        <SemanticMaps ref="map" apiKey={this.ApiKey.masquerade} onUpdate={this.updateData}zoom="14" lat="19.4326077" lng="-99.133208" landscape='ffffff' road='bbc0c4' water='e9ebed' text='666666' poi='f5f5f5' markers={this.data}/> :
                        ''
                }
                <div data-grid="gutters">
                    <div data-column="xs-12 sm-4">
                        <section data-card="full-width">
                            <header><h1> My favorite stores!</h1></header>
                            <section>
                                <ul data-list="three-line">
                                    {this.favoriteStores.map((store, i) => {
                                        return <li key={store.key}>
                                            <span>
                                                <span>{store.title}</span>
                                                <small>{store.address}</small>
                                            </span>
                                        </li>;
                                    })}
                                </ul>
                            </section>
                            <footer>
                                <nav>
                                    <button data-button="danger" onClick={this.clearFavoriteStore.bind(this)}>Clear</button>
                                </nav>
                            </footer>
                        </section>
                    </div>
                </div>
            </div>
        );
    }
};


export default App;
